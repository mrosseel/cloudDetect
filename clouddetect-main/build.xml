<?xml version="1.0" encoding="ISO-8859-1" ?>
<project name="cloudWatch" default="run" basedir="." >
<!-- ANT Build.xml file for jDip -->
<!-- todo:
	0) FIX javadoc creation; needs to know about batik libraries
		and maybe give it some more memory?

	1) add automated testing (run testsuite)

	NOTES:
		JAVA_HOME and ANT_HOME environment vars must NOT have a trailing (back)slash

-->
    <!-- load external properties -->
    <property file="build.properties"/>

	<!-- set global properties for this build -->
	<property name="src.dir" value="${base.dir}/src"/>				<!-- defines the src attribute -->
    <property name="testsrc.dir" value="${base.dir}/testsrc"/>				<!-- defines the testsrc} attribute -->
	<property name="conf.dir" value="${base.dir}/conf"/>				<!-- defines the conf attribute -->
    <property name="build.dir" value="${base.dir}/build"/>			<!-- create a typical build -->
	<property name="dist.dir"  value="${base.dir}/dist"/>			<!-- create distribution .jar file -->
    <property name="javadoc.dir"  value="${build.dir}/javadoc"/>		<!-- create javadocs only -->
	<property name="srcdist.dir" value="${base.dir}/src_dist"/>		<!-- source file distribution, orginized nicely -->
    <property name="testsuite.file" value="dip.TestSuite"/>		<!-- izpack installer file -->

    <!-- build properties -->
	<property name="build.compiler" value="modern"/>                <!-- package name of source -->
    <property name="package" value=""/>

	<!-- a pattern that exludes files ending in "~", which are editor backup files -->
	<patternset id="exclude.backup.files">
		<exclude name="*~"/>
	</patternset>

	<!-- a pattern which only includes .java source files -->
	<patternset id="java.source.files.only">
		<include name="**/*.java"/>
	</patternset>

	<!-- everything -->
	<patternset id="everything">
		<include name="**/*"/>
	</patternset>

    <!-- all jars in current dir -->
	<patternset id="jars">
		<include name="*.jar"/>
	</patternset>

    <!-- all jars, also those in subdirs -->
    <patternset id="jars_recursive">
		<include name="**/*.jar"/>
	</patternset>

	<patternset id="textonly">
		<include name="*.txt"/>
		<include name="*.TXT"/>
	</patternset>

	<path id="compile.class.path">
		<fileset dir="${base.dir}/lib">
			<patternset refid="jars"/>
		</fileset>
        <pathelement location="${conf.dir}"/>
        <pathelement location="${jmf.jar}"/>
	</path>

	<!-- classpath with the lib/ dir, and the dir with compiled .class files, necessary for the 'run' target -->
	<path id="run.class.path">
		<path refid="compile.class.path"/>
		<pathelement location="${build.dir}"/>
	</path>

    <!-- classpath to run the unit tests -->
    <path id="unittesting.class.path">
		<path refid="run.class.path"/>
        <fileset dir="${base.dir}/lib">
			<patternset refid="jars_recursive"/>
		</fileset>
	</path>
	
	
	
	<!-- cleans the build directory -->
	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>
	
	
	<!-- init -->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dir}/resource"/>
		<mkdir dir="${build.dir}/resource/il8n"/>
		<mkdir dir="${build.dir}/resource/common"/>
		<mkdir dir="${build.dir}/resource/help"/>
	</target>
	
	
	<!-- create a distributable version of source & important files -->
	<target name="srcdist">
		<tstamp/>

		<mkdir dir="${srcdist.dir}/dip"/>
		<mkdir dir="${srcdist.dir}/etc"/>
		<mkdir dir="${srcdist.dir}/lib"/>
		<mkdir dir="${srcdist.dir}/resource"/>

		<!-- copy ONLY java source files -->
		<copy todir="${srcdist.dir}/dip">
			<fileset dir="${src.dir}/dip" >
				<patternset refid="java.source.files.only"/>
			</fileset>
		</copy>

		<!-- copy everything in the given directories -->
		<copy todir="${srcdist.dir}/etc">
			<fileset dir="${src.dir}/etc" >
				<patternset refid="everything"/>
			</fileset>
		</copy>
		<copy todir="${srcdist.dir}/resource">
			<fileset dir="${src.dir}/resource" >
				<patternset refid="everything"/>
			</fileset>
		</copy>
		<copy todir="${srcdist.dir}/lib">
			<fileset dir="${src.dir}/lib" >
				<patternset refid="everything"/>
			</fileset>
		</copy>

		<!-- all .txt or .TXT files -->
		<copy todir="${srcdist.dir}">
			<fileset dir="${src.dir}/" >
				<patternset refid="textonly"/>
			</fileset>
		</copy>
	</target>


    <!-- build (compile) -->
    <target name="build" depends="init">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src.dir}" destdir="${build.dir}" source="1.4" debug="true">
            <classpath refid="compile.class.path"/>
        </javac>
	</target>


	<!-- distribution build; creates a .jar file -->
	<target name="dist" depends="build">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist.dir}"/>
		<!-- include build directory, which contains the resource directory -->
		<jar jarfile="${dist.dir}/jdip.jar" basedir="${build.dir}" excludes="**/*.zip" manifest="${src.dir}/manifest.txt"/>

		<!-- include all required library files in the /lib dir -->
		<mkdir dir="${dist.dir}/lib"/>
		<copy todir="${dist.dir}/lib">
			<fileset dir="${src.dir}/lib"/>
		</copy>


        <!--        Let's not copy these files for now, need a clean root dir-->
		<!-- copy other useful support files to main directory -->
        <!--		<copy todir="${dist.dir}/">-->
        <!--			<fileset dir="${src.dir}/etc/scripts"/>-->
        <!--			<fileset dir="${src.dir}/etc/test_data"/>-->
        <!--		</copy>-->
        <copy todir="${dist.dir}/">
            <fileset file="${src.dir}/etc/scripts/jdip.bat"/>
            <fileset file="${src.dir}/etc/scripts/jdip.sh"/>
        </copy>
		
		 <copy file="${src.dir}/README.TXT" todir="${dist.dir}"/>
		 <copy file="${src.dir}/LICENSE.TXT" todir="${dist.dir}"/>
		 <copy file="${src.dir}/HISTORY.TXT" todir="${dist.dir}"/>
	</target>



	<!-- run; we must build first if required -->
	<target name="run" depends="build">
		<java classname="application.CloudFrame" fork="yes" dir="${build.dir}">
			<classpath refid="run.class.path" />
			<jvmarg value="-ea" />
            <arg value="vfw:Microsoft WDM Image Capture (Win32):0" />
		</java>
	</target>


    <target name="changelog" depends="init">
        <cvschangelog dir="${src.dir}"
            destfile="changelog.xml"
            daysinpast="10"/>
        <style in="changelog.xml"
            out="changelog.html"
            style="${etc.dir}/changelog.xsl">
            <param name="title" expression="jDip ChangeLog"/>
            <param name="module" expression="jdip"/>
            <param name="cvsweb" expression="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/jdip/"/>
        </style>
    </target>

    <!-- create javadocs; no dependencies -->
    <target name="javadoc">
        <mkdir dir="${javadoc.dir}" />
        <javadoc 	packagenames="dip.world.*, dip.process.*, dip.order.*, dip.order.result.*, dip.misc.*, dip.gui.*, dip.gui.dialog.*, dip.gui.map.*, dip.gui.undo.*, dip.gui.map.orderwriter.*, dip.judge.parser.*, dip.world.metadata.*, dip.world.variant.*, dip.world.variant.parser.*, dip.world.variant.data.*, dip.tool.*"
            sourcepath="${src.dir}" destdir="${javadoc.dir}" author="true" version="true" use="true"
            windowtitle="jDip ${version} Documentation" doctitle="jDip ${version}" bottom="Copyright ? 2002 Zachary DelProposto / jDip Development Team. All Rights Reserved."
            source="1.4"
            splitindex="true"
            additionalparam="-breakiterator"
            />
    </target>

    <!-- JUnitDoclet -->
    <target name="junitdoclet" depends="build">
        <mkdir dir="${testsrc.dir}"/>
        <javadoc
            packagenames="*"
            sourcepath="${src.dir}"
            defaultexcludes="yes"
            doclet="com.objectfab.tools.junitdoclet.JUnitDoclet"
            docletpathref="unittesting.class.path"
            additionalparam="-source 1.4 -d ${testsrc.dir}">
            <classpath refid ="unittesting.class.path"/>
        </javadoc>
    </target>

    <target name="junitcompile">
        <javac srcdir="${testsrc.dir}" destdir="${build.dir}" debug="on">
            <classpath refid="classpath_default" />
        </javac>
    </target>
    <!---->
    <target name="junittest" depends="junitcompile">
        <junit fork="yes" haltonfailure="no">
            <formatter type="plain" usefile="no"/>
            <test name="${testsuite.file}" />
            <classpath refid="classpath_default" />
        </junit>
    </target>
</project>

