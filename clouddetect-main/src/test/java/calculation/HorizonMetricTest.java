package calculation;

import junit.framework.TestCase;
import media.image.CloudImageResult;
import media.image.CloudImageResultImpl;
import calculation.splitters.splittermetric.HorizonMetric;

// JUnitDoclet end import

/**
 * Generated by JUnitDoclet, a tool provided by ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org and www.objectfab.de for
 * informations about the tool, the licence and the authors.
 */

public class HorizonMetricTest
// JUnitDoclet begin extends_implements
        extends TestCase
// JUnitDoclet end extends_implements
{
    // JUnitDoclet begin class
    HorizonMetric horizonMetric = null;

    // JUnitDoclet end class

    public HorizonMetricTest(String name) {
        // JUnitDoclet begin method LineMaxStdDevMetricTest
        super(name);
        // JUnitDoclet end method LineMaxStdDevMetricTest
    }

    protected void setUp() throws Exception {
        // JUnitDoclet begin method testcase.setUp
        super.setUp();
        horizonMetric = new HorizonMetric();
        // JUnitDoclet end method testcase.setUp
    }

    protected void tearDown() throws Exception {
        // JUnitDoclet begin method testcase.tearDown
        horizonMetric = null;
        super.tearDown();
        // JUnitDoclet end method testcase.tearDown
    }

    public void testCompute() throws Exception {
        // JUnitDoclet begin method compute
    	
    	// don't know what to expect, has to be looked at later...
    	
//        int[] data = { 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 100, 100, 100,
//                100, 100, 100, 100, 100 };
//        CloudImage image = new CloudImageImpl(data, 4, 5, true);
//        assertEquals(1.8718, horizonMetric.compute(image, 6), 0.0001);
//        try {
//            horizonMetric.compute(image, data.length - 1);
//            fail();
//        } catch (IllegalArgumentException e) {
//            // expected behaviour
//        }
//        assertEquals(3.65978991, horizonMetric.compute(image, data.length - 2),
//                0.0001);
//        assertEquals(10, horizonMetric.compute(image, data.length - 2), 0.0001);
        // JUnitDoclet end method compute
    }

    /**
     * JUnitDoclet moves marker to this method, if there is not match for them
     * in the regenerated code and if the marker is not empty. This way, no test
     * gets lost when regenerating after renaming. Method testVault is supposed
     * to be empty.
     */
    public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
    }

    public static void main(String[] args) {
        // JUnitDoclet begin method testcase.main
        junit.textui.TestRunner.run(HorizonMetricTest.class);
        // JUnitDoclet end method testcase.main
    }
}
