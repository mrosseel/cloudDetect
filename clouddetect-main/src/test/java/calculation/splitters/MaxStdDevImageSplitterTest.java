package calculation.splitters;

import util.VisualiseSplitterLocation;
import junit.framework.TestCase;
import media.image.CloudImageResult;
import media.image.CloudImageResultImpl;
import media.image.producer.FileClasspathImageProducer;

// JUnitDoclet end import

/**
 * Generated by JUnitDoclet, a tool provided by ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org and www.objectfab.de for
 * informations about the tool, the licence and the authors.
 */

public class MaxStdDevImageSplitterTest
// JUnitDoclet begin extends_implements
        extends TestCase
// JUnitDoclet end extends_implements
{
    // JUnitDoclet begin class
    calculation.splitters.MaxStdDevImageSplitter maxstddevmetric = null;

    // JUnitDoclet end class

    public MaxStdDevImageSplitterTest(String name) {
        // JUnitDoclet begin method MaxStdDevMetricTest
        super(name);
        // JUnitDoclet end method MaxStdDevMetricTest
    }

    public calculation.splitters.MaxStdDevImageSplitter createInstance()
            throws Exception {
        // JUnitDoclet begin method testcase.createInstance
        return new calculation.splitters.MaxStdDevImageSplitter();
        // JUnitDoclet end method testcase.createInstance
    }

    protected void setUp() throws Exception {
        // JUnitDoclet begin method testcase.setUp
        super.setUp();
        maxstddevmetric = createInstance();
        // JUnitDoclet end method testcase.setUp
    }

    protected void tearDown() throws Exception {
        // JUnitDoclet begin method testcase.tearDown
        maxstddevmetric = null;
        super.tearDown();
        // JUnitDoclet end method testcase.tearDown
    }

    public void testCompute() {
        double[] data = new double[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1 };
        CloudImageResult image = new CloudImageResultImpl(data, 10, 2, false);
        // maxstddevmetric.compute(image);
        // assertEquals(50, maxstddevmetric.getPctSplitterLocation());
        //
        // data = new double[] { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        // 1, 1, 1, 1 };
        // image = new CloudImageImpl(data, 10, 2);
        // maxstddevmetric.compute(image);
        // assertEquals(70, maxstddevmetric.getPctSplitterLocation());
        // assertEquals(1.0, maxstddevmetric.getResult(), 0.0);

        FileClasspathImageProducer producer = new FileClasspathImageProducer(
                "unit test", "/current_min_daylight.jpg");
        image = producer.produceContent();
        maxstddevmetric.split(image);

//        VisualiseSplitterLocation.showImage(image, maxstddevmetric
//                .getBestSplitterLocation());

    }

    /**
     * JUnitDoclet moves marker to this method, if there is not match for them
     * in the regenerated code and if the marker is not empty. This way, no test
     * gets lost when regenerating after renaming. Method testVault is supposed
     * to be empty.
     */
    public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
    }

    public static void main(String[] args) {
        // JUnitDoclet begin method testcase.main
        junit.textui.TestRunner.run(MaxStdDevImageSplitterTest.class);
        // JUnitDoclet end method testcase.main
    }
}
